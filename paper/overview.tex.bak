\section{Overview of Approach}
Several methods for solving math word problems work by mapping problem text to underlying equations \cite{kushman2014learning,koncel2015parsing,roy2015solving}.
The approach outlined here follows the methods of \newcite{koncel2015parsing} and \cite{roy2015solving} in structuring underlying equations in tree form (See Figure~\ref{fig:teaser}).
The structure of equation trees allows for their decomposition, so that learning can take place locally. 
Each intermediate node represents some combination of quantities, the result of which is itself a quantity that may enter into further combinations. 
The text of the problem, if well understood, indicates the correct operations for recursively combining quantities. 
This paper focuses on improving operator identification for two problem quantities, be they leaf or intermediate nodes in the equation tree. 

\paragraph{Training}
In the training phase, we first produce a set of equation trees which yield the correct answer for a given word problem utilizing the Integer Linear Program described in \newcite{koncel2015parsing}. 
This program uses ILP to rank generate the top-k best trees according to a set of possibly soft constraints including equations complexity and type constraints.
Quantity ``types'' are the nouns associated via a dependency parse relation with a numerical value in the problem.
An example type constraint is a penalty against multiplying two quantities of the same types. 
We take the correct equations from the top 100 trees generated by this method.

We then decompose these trees the possible subtrees headed by an intermediate node and labelled with a specific operation $op$.
We treat each subtree as a triple consisting of two quantities corresponding to the left and right children and $op$. 
We associate each quantity with a Number Entity derived from the domain-independent semantic representation of the problem text provided by the ERG. 
The details of this representation are described in Section~\ref{semantics}
We then construct a vector from the two Number Entities which serves as positive example for the $op$ operation, and a negative sample for all other operators. 
The details of this vector representation are described in Section~\ref{vectors}

\paragraph{Inference} At inference, we consider an unseen vector and apply the model learned above to determine the correct operator. 
We report the accuracy of the inference procedure in determining correct operators. 
